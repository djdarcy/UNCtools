name: CI

on:
  push:
    branches: [ main, dev ]
  pull_request:
    branches: [ main, dev ]
  workflow_dispatch:  # Allow manual trigger

jobs:
  test:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [windows-latest, ubuntu-latest, macos-latest]
        python-version: ['3.9', '3.10', '3.11', '3.12', '3.13']
        exclude:
          # Exclude some combinations to save CI minutes
          - os: macos-latest
            python-version: '3.9'
          - os: ubuntu-latest
            python-version: '3.9'

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}

    - name: Cache dependencies
      uses: actions/cache@v4
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements*.txt', '**/setup.py', '**/pyproject.toml') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e ".[dev]"

    - name: Install Windows extras
      if: runner.os == 'Windows'
      run: |
        pip install -e ".[windows]"

    - name: Verify pywin32 on Windows
      if: runner.os == 'Windows'
      run: |
        python -c "import win32api; print('pywin32 available:', win32api.__file__)"

    - name: Run tests
      run: |
        python -m pytest tests/ -v --tb=short
      env:
        PYTHONPATH: ${{ github.workspace }}

    - name: Upload test results
      if: failure()
      uses: actions/upload-artifact@v4
      with:
        name: test-results-${{ matrix.os }}-${{ matrix.python-version }}
        path: |
          test_runs/
          *.log

  lint:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e .[dev]
        pip install flake8 black mypy

    - name: Check code formatting with black
      run: |
        black --check unctools tests
      continue-on-error: true  # Don't fail build on formatting issues

    - name: Lint with flake8
      run: |
        # Stop the build if there are Python syntax errors or undefined names
        flake8 unctools tests --count --select=E9,F63,F7,F82 --show-source --statistics
        # Exit-zero treats all errors as warnings
        flake8 unctools tests --count --exit-zero --max-complexity=10 --max-line-length=100 --statistics
      continue-on-error: true

    - name: Type checking with mypy
      run: |
        mypy unctools --ignore-missing-imports
      continue-on-error: true

  build:
    runs-on: ubuntu-latest
    needs: [test, lint]  # Only build if tests and linting pass

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'

    - name: Install build dependencies
      run: |
        python -m pip install --upgrade pip
        pip install build wheel

    - name: Build package
      run: |
        python -m build

    - name: Check package
      run: |
        pip install twine
        twine check dist/*

    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: dist
        path: dist/
